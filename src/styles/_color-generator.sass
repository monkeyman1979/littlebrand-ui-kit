// LittleBrand UI Kit - OKLCH Color Scale Generator
// Functions to generate color scales from single colors using OKLCH

@use 'sass:color'
@use 'sass:math'
@use 'sass:map'
@use 'sass:list'
@use 'sass:meta'

// Calculate perceptual luminance using OKLCH lightness
// OKLCH lightness is already perceptually uniform (0-1 scale)
@function get-oklch-luminance($color)
  // For OKLCH colors, lightness is the first parameter
  @if meta.type-of($color) == 'string' and str-index($color, 'oklch') != null
    // Extract lightness from OKLCH string
    // This is simplified - in production would need proper parsing
    @return 0.5 // Default middle value
  @else
    // Fallback to traditional luminance calculation for non-OKLCH colors
    $r: color.red($color) / 255
    $g: color.green($color) / 255
    $b: color.blue($color) / 255
    
    $r: if($r <= 0.03928, $r / 12.92, math.pow(($r + 0.055) / 1.055, 2.4))
    $g: if($g <= 0.03928, $g / 12.92, math.pow(($g + 0.055) / 1.055, 2.4))
    $b: if($b <= 0.03928, $b / 12.92, math.pow(($b + 0.055) / 1.055, 2.4))
    
    @return (0.2126 * $r) + (0.7152 * $g) + (0.0722 * $b)

// Determine if white or dark text should be used based on OKLCH lightness
@function get-contrast-text-oklch($lightness)
  // OKLCH lightness > 0.6 means light color, use dark text
  @return if($lightness > 0.6, var(--lb-text-neutral-contrast-high), white)

// Generate a 12-step OKLCH color scale
// Input: base OKLCH values (lightness, chroma, hue)
@function generate-oklch-scale($base-lightness, $base-chroma, $base-hue, $curve: 'natural')
  // Ensure step 9 is in a usable range (0.4-0.6 lightness)
  $target-lightness-9: if($base-lightness > 0.6, 0.52, if($base-lightness < 0.4, 0.48, $base-lightness))
  
  $scale: ()
  
  // OKLCH Lightness stops (0-1 scale, not percentage)
  $lightness-stops: (
    1: 0.99,   // App background
    2: 0.98,   // Subtle background  
    3: 0.96,   // UI element background
    4: 0.93,   // Hovered UI element
    5: 0.88,   // Active UI element
    6: 0.78,   // Subtle borders and separators
    7: 0.68,   // UI element borders
    8: 0.58,   // Hovered borders, focused borders
    9: $target-lightness-9,  // Solid backgrounds (buttons, etc)
    10: math.max($target-lightness-9 - 0.10, 0.35),  // Hovered solid backgrounds
    11: math.max($target-lightness-9 - 0.18, 0.25),  // Low contrast text
    12: math.max($target-lightness-9 - 0.28, 0.15)   // High contrast text
  )
  
  // Chroma multipliers - adjusted for OKLCH's absolute chroma scale
  $chroma-multipliers: (
    1: 0.20,  // Very subtle hint of color
    2: 0.32,  // Slightly more color
    3: 0.48,  // Noticeable but soft
    4: 0.64,  // Clear color identity
    5: 0.80,  // Strong color presence
    6: 0.90,  // Near full chroma
    7: 0.95,  // Almost original
    8: 1.00,  // Full chroma
    9: 1.00,  // Original chroma (no change)
    10: 1.02, // Slightly boosted for hover
    11: 0.95, // Slightly muted for text
    12: 0.90  // Muted for high contrast text
  )
  
  // Apply curve adjustments
  @if $curve == 'vivid'
    $chroma-multipliers: (
      1: 0.30, 2: 0.45, 3: 0.60, 4: 0.75, 5: 0.90,
      6: 1.00, 7: 1.05, 8: 1.10, 9: 1.10, 10: 1.12,
      11: 1.05, 12: 1.00
    )
  @else if $curve == 'muted'
    $chroma-multipliers: (
      1: 0.15, 2: 0.25, 3: 0.35, 4: 0.50, 5: 0.65,
      6: 0.75, 7: 0.80, 8: 0.85, 9: 0.85, 10: 0.85,
      11: 0.80, 12: 0.75
    )
  
  @for $i from 1 through 12
    $target-lightness: map.get($lightness-stops, $i)
    $chroma-multiplier: map.get($chroma-multipliers, $i)
    
    // Calculate final chroma (capped at 0.3 for UI colors)
    $final-chroma: math.min($base-chroma * $chroma-multiplier, 0.3)
    
    // For step 9, keep original chroma
    @if $i == 9
      $final-chroma: $base-chroma
    
    // Create OKLCH color string
    $scale: map.set($scale, $i, oklch($target-lightness $final-chroma $base-hue))
  
  @return $scale

// Generate dark mode version of an OKLCH scale
@function generate-oklch-dark-scale($base-lightness, $base-chroma, $base-hue)
  $dark-scale: ()
  
  // Ensure step 9 is in usable range
  $target-lightness-9: if($base-lightness > 0.6, 0.52, if($base-lightness < 0.4, 0.48, $base-lightness))
  
  // Dark mode lightness curve - OKLCH scale (0-1)
  $dark-lightness-stops: (
    1: 0.08,   // Very dark app background
    2: 0.11,   // Slightly lighter
    3: 0.15,   // More noticeable difference
    4: 0.19,   // Hovered dark UI element
    5: 0.24,   // Active dark UI element
    6: 0.30,   // Dark subtle borders
    7: 0.38,   // Dark UI borders
    8: 0.46,   // Dark hovered borders
    9: $target-lightness-9,  // Keep consistent with light mode
    10: math.min($target-lightness-9 + 0.08, 0.65),  // Slightly lighter for hover
    11: 0.85,  // Very bright for low contrast text
    12: 0.96   // Near white for high contrast text
  )
  
  // Dark mode chroma adjustments - higher to avoid muddy colors
  $dark-chroma-multipliers: (
    1: 0.35,  // Still some color in darkest bg
    2: 0.45,  // More color to differentiate
    3: 0.55,  // Noticeable color
    4: 0.65,
    5: 0.75,
    6: 0.85,
    7: 0.95,
    8: 1.05,  // Boost for visibility
    9: 1.00,  // Keep original chroma
    10: 1.00, // Maintain chroma
    11: 1.10, // Boost for bright text
    12: 0.95  // Slightly muted but still colorful
  )
  
  @for $i from 1 through 12
    $target-lightness: map.get($dark-lightness-stops, $i)
    $chroma-multiplier: map.get($dark-chroma-multipliers, $i)
    
    // Calculate final chroma (capped at 0.3)
    $final-chroma: math.min($base-chroma * $chroma-multiplier, 0.3)
    
    // Create OKLCH color string
    $dark-scale: map.set($dark-scale, $i, oklch($target-lightness $final-chroma $base-hue))
  
  @return $dark-scale

// Generate alpha scale for OKLCH color
@function generate-oklch-alpha-scale($base-lightness, $base-chroma, $base-hue, $mode: 'light')
  $alpha-scale: ()
  
  // Alpha progression for semantic use
  $light-alphas: (0.012, 0.027, 0.047, 0.071, 0.090, 0.114, 0.141, 0.220, 0.439, 0.478, 0.565, 0.910)
  $dark-alphas: (0.017, 0.034, 0.056, 0.085, 0.110, 0.135, 0.165, 0.250, 0.480, 0.520, 0.620, 0.930)
  
  @for $i from 1 through 12
    @if $mode == 'dark'
      $alpha: list.nth($dark-alphas, $i)
      $alpha-scale: map.set($alpha-scale, $i, oklch($base-lightness $base-chroma $base-hue / $alpha))
    @else
      $alpha: list.nth($light-alphas, $i)
      $alpha-scale: map.set($alpha-scale, $i, oklch($base-lightness $base-chroma $base-hue / $alpha))
  
  @return $alpha-scale

// Generate all semantic tokens from an OKLCH color scale
@function generate-oklch-semantic-tokens($name, $scale)
  $tokens: ()
  
  // Border tokens
  $tokens: map.set($tokens, '--lb-border-#{$name}-line', map.get($scale, 6))
  $tokens: map.set($tokens, '--lb-border-#{$name}-normal', map.get($scale, 7))
  $tokens: map.set($tokens, '--lb-border-#{$name}-active', map.get($scale, 9))
  $tokens: map.set($tokens, '--lb-border-#{$name}-focus', map.get($scale, 7))
  $tokens: map.set($tokens, '--lb-border-#{$name}-disabled', map.get($scale, 5))
  $tokens: map.set($tokens, '--lb-border-#{$name}-subtle', map.get($scale, 4))
  
  // Fill tokens
  $tokens: map.set($tokens, '--lb-fill-#{$name}-normal', map.get($scale, 9))
  $tokens: map.set($tokens, '--lb-fill-#{$name}-hover', map.get($scale, 10))
  $tokens: map.set($tokens, '--lb-fill-#{$name}-active', map.get($scale, 8))
  $tokens: map.set($tokens, '--lb-fill-#{$name}-focus', map.get($scale, 8))
  $tokens: map.set($tokens, '--lb-fill-#{$name}-disabled', map.get($scale, 4))
  
  // Text tokens
  $tokens: map.set($tokens, '--lb-text-#{$name}-normal', map.get($scale, 9))
  $tokens: map.set($tokens, '--lb-text-#{$name}-contrast-low', map.get($scale, 11))
  $tokens: map.set($tokens, '--lb-text-#{$name}-contrast-high', map.get($scale, 12))
  $tokens: map.set($tokens, '--lb-text-#{$name}-disabled', map.get($scale, 5))
  
  // Text-on tokens - determine contrast based on step 9 lightness
  // Extract lightness value from step 9 (this is simplified)
  $step9-lightness: 0.5 // Default, would need proper parsing
  $text-color: get-contrast-text-oklch($step9-lightness)
  $tokens: map.set($tokens, '--lb-text-on-#{$name}', $text-color)
  $tokens: map.set($tokens, '--lb-text-on-#{$name}-hover', $text-color)
  $tokens: map.set($tokens, '--lb-text-on-#{$name}-active', $text-color)
  
  // Surface tokens
  $tokens: map.set($tokens, '--lb-surface-#{$name}-normal', map.get($scale, 2))
  $tokens: map.set($tokens, '--lb-surface-#{$name}-hover', map.get($scale, 3))
  $tokens: map.set($tokens, '--lb-surface-#{$name}-active', map.get($scale, 4))
  $tokens: map.set($tokens, '--lb-surface-#{$name}-subtle', map.get($scale, 1))
  $tokens: map.set($tokens, '--lb-surface-#{$name}-raised', map.get($scale, 1))
  $tokens: map.set($tokens, '--lb-surface-#{$name}-disabled', map.get($scale, 3))
  
  @return $tokens

// Helper mixin to output tokens as CSS custom properties
@mixin output-tokens($tokens)
  @each $property, $value in $tokens
    #{$property}: #{$value}