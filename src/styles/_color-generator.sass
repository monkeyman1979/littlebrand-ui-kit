// LittleBrand UI Kit - Color Scale Generator
// Functions to generate color scales from single colors or process full scales

@use 'sass:color'
@use 'sass:math'
@use 'sass:map'
@use 'sass:list'
@use 'sass:meta'
@use 'sass:string'

// Calculate relative luminance of a color using WCAG formula
@function get-luminance($color)
  $r: color.red($color) / 255
  $g: color.green($color) / 255
  $b: color.blue($color) / 255
  
  // Apply gamma correction
  $r: if($r <= 0.03928, $r / 12.92, math.pow(($r + 0.055) / 1.055, 2.4))
  $g: if($g <= 0.03928, $g / 12.92, math.pow(($g + 0.055) / 1.055, 2.4))
  $b: if($b <= 0.03928, $b / 12.92, math.pow(($b + 0.055) / 1.055, 2.4))
  
  // Return relative luminance
  @return (0.2126 * $r) + (0.7152 * $g) + (0.0722 * $b)

// Determine if white or dark text should be used on a given background
@function get-contrast-text($background-color)
  $luminance: get-luminance($background-color)
  
  // Use white text if luminance is below 0.5, dark text otherwise
  // This threshold provides good contrast for most colors
  @return if($luminance > 0.5, var(--lb-text-neutral-contrast-high), white)

// Generate a 12-step color scale from a single color
// The input color typically becomes step 9 (the primary/base color)
@function generate-scale($color, $curve: 'natural')
  $hue: color.hue($color)
  $base-saturation: color.saturation($color)
  $base-lightness: color.lightness($color)
  
  // Curve adjustments for different looks
  $saturation-range: if($curve == 'vivid', 30%, if($curve == 'muted', 15%, 20%))
  $lightness-range: 88%
  
  $scale: ()
  
  @for $i from 1 through 12
    $step-ratio: ($i - 1) / 11
    
    @if $i <= 9
      // Steps 1-9: Progressively darker from very light to base
      $ratio: ($i - 1) / 8
      $lightness: 98% - ($ratio * (98% - $base-lightness))
      
      // Reduce saturation for lighter steps
      $sat-reduction: if($i <= 3, 0.7, if($i <= 6, 0.85, 1))
      $saturation: $base-saturation * $sat-reduction
      
      $scale: map.set($scale, $i, color.change($color, $lightness: $lightness, $saturation: $saturation))
    @else
      // Steps 10-12: Darker than base
      $ratio: ($i - 9) / 3
      $lightness: $base-lightness - ($ratio * ($base-lightness - 15%))
      
      // Slightly increase saturation for darker steps
      $sat-boost: if($curve == 'vivid', 1.1, 1.05)
      $saturation: math.min($base-saturation * $sat-boost, 100%)
      
      $scale: map.set($scale, $i, color.change($color, $lightness: $lightness, $saturation: $saturation))
  
  @return $scale

// Generate dark mode version of a scale
@function generate-dark-scale($scale)
  $dark-scale: ()
  
  @for $i from 1 through 12
    $light-color: map.get($scale, $i)
    
    // Invert the scale but maintain hue
    $inverted-index: 13 - $i
    $base-color: map.get($scale, $inverted-index)
    
    // Adjust for better dark mode contrast
    @if $i <= 3
      // Dark background tints
      $lightness: 8% + ($i * 3%)
      $dark-scale: map.set($dark-scale, $i, color.change($base-color, $lightness: $lightness))
    @else if $i >= 10
      // Light foreground colors
      $lightness: 75% + (($i - 9) * 8%)
      $dark-scale: map.set($dark-scale, $i, color.change($base-color, $lightness: $lightness))
    @else
      // Middle range - adjust for contrast
      $dark-scale: map.set($dark-scale, $i, $base-color)
  
  @return $dark-scale

// Generate alpha scale for a color
@function generate-alpha-scale($color, $mode: 'light')
  $alpha-scale: ()
  
  // Alpha progression for semantic use
  $alphas: (0.012, 0.027, 0.047, 0.071, 0.090, 0.114, 0.141, 0.220, 0.439, 0.478, 0.565, 0.910)
  
  @for $i from 1 through 12
    $alpha: list.nth($alphas, $i)
    
    @if $mode == 'dark'
      // For dark mode, use white-based alphas
      $alpha-scale: map.set($alpha-scale, $i, rgba(255, 255, 255, $alpha))
    @else
      // For light mode, use color-based alphas
      $r: color.red($color)
      $g: color.green($color)
      $b: color.blue($color)
      $alpha-scale: map.set($alpha-scale, $i, rgba($r, $g, $b, $alpha))
  
  @return $alpha-scale

// Process a color input - can be a single color, a full scale, or a preset name
@function process-color-input($input, $presets: null)
  // If it's a string, check if it's a preset or a color
  @if meta.type-of($input) == 'string'
    @if $presets and map.has-key($presets, $input)
      @return map.get($presets, $input)
    @else
      // Assume it's a color value
      @return generate-scale($input)
  @else if meta.type-of($input) == 'map'
    // If it's a map, assume it's already a scale
    @return $input
  @else if meta.type-of($input) == 'color'
    // If it's a color, generate scale
    @return generate-scale($input)
  @else
    // Default: return as-is
    @return $input

// Generate all semantic tokens from a color scale
@function generate-semantic-tokens($name, $scale)
  $tokens: ()
  
  // Border tokens
  $tokens: map.set($tokens, '--lb-border-#{$name}-line', map.get($scale, 6))
  $tokens: map.set($tokens, '--lb-border-#{$name}-normal', map.get($scale, 7))
  $tokens: map.set($tokens, '--lb-border-#{$name}-active', map.get($scale, 8))
  $tokens: map.set($tokens, '--lb-border-#{$name}-focus', map.get($scale, 7))  // Using step 7 with alpha
  $tokens: map.set($tokens, '--lb-border-#{$name}-disabled', map.get($scale, 5))
  $tokens: map.set($tokens, '--lb-border-#{$name}-subtle', map.get($scale, 4))
  
  // Fill tokens
  $tokens: map.set($tokens, '--lb-fill-#{$name}-normal', map.get($scale, 9))
  $tokens: map.set($tokens, '--lb-fill-#{$name}-hover', map.get($scale, 10))
  $tokens: map.set($tokens, '--lb-fill-#{$name}-active', map.get($scale, 8))
  $tokens: map.set($tokens, '--lb-fill-#{$name}-focus', map.get($scale, 8))
  $tokens: map.set($tokens, '--lb-fill-#{$name}-disabled', map.get($scale, 4))
  
  // Text tokens
  $tokens: map.set($tokens, '--lb-text-#{$name}-normal', map.get($scale, 9))
  $tokens: map.set($tokens, '--lb-text-#{$name}-contrast-low', map.get($scale, 11))
  $tokens: map.set($tokens, '--lb-text-#{$name}-contrast-high', map.get($scale, 12))
  $tokens: map.set($tokens, '--lb-text-#{$name}-disabled', map.get($scale, 5))
  
  // Text-on tokens for filled backgrounds (calculated based on luminance)
  $fill-normal: map.get($scale, 9)
  $fill-hover: map.get($scale, 10)
  $fill-active: map.get($scale, 8)
  $tokens: map.set($tokens, '--lb-text-on-#{$name}', get-contrast-text($fill-normal))
  $tokens: map.set($tokens, '--lb-text-on-#{$name}-hover', get-contrast-text($fill-hover))
  $tokens: map.set($tokens, '--lb-text-on-#{$name}-active', get-contrast-text($fill-active))
  
  // Surface tokens
  $tokens: map.set($tokens, '--lb-surface-#{$name}-normal', map.get($scale, 2))
  $tokens: map.set($tokens, '--lb-surface-#{$name}-hover', map.get($scale, 3))
  $tokens: map.set($tokens, '--lb-surface-#{$name}-active', map.get($scale, 4))
  $tokens: map.set($tokens, '--lb-surface-#{$name}-subtle', map.get($scale, 1))
  $tokens: map.set($tokens, '--lb-surface-#{$name}-raised', map.get($scale, 1))
  $tokens: map.set($tokens, '--lb-surface-#{$name}-disabled', map.get($scale, 3))
  
  @return $tokens

// Helper mixin to output tokens as CSS custom properties
@mixin output-tokens($tokens)
  @each $property, $value in $tokens
    #{$property}: #{$value}