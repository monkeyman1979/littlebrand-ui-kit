// LittleBrand UI Kit - Color Scale Generator
// Functions to generate color scales from single colors or process full scales

@use 'sass:color'
@use 'sass:math'
@use 'sass:map'
@use 'sass:list'
@use 'sass:meta'
@use 'sass:string'

// Calculate relative luminance of a color using WCAG formula
@function get-luminance($color)
  $r: color.red($color) / 255
  $g: color.green($color) / 255
  $b: color.blue($color) / 255
  
  // Apply gamma correction
  $r: if($r <= 0.03928, $r / 12.92, math.pow(($r + 0.055) / 1.055, 2.4))
  $g: if($g <= 0.03928, $g / 12.92, math.pow(($g + 0.055) / 1.055, 2.4))
  $b: if($b <= 0.03928, $b / 12.92, math.pow(($b + 0.055) / 1.055, 2.4))
  
  // Return relative luminance
  @return (0.2126 * $r) + (0.7152 * $g) + (0.0722 * $b)

// Determine if white or dark text should be used on a given background
@function get-contrast-text($background-color)
  $luminance: get-luminance($background-color)
  
  // Use white text if luminance is below 0.5, dark text otherwise
  // This threshold provides good contrast for most colors
  @return if($luminance > 0.5, var(--lb-text-neutral-contrast-high), white)

// Generate a 12-step color scale from a single color
// The input color becomes step 9 (the primary/base color) with minimal modification
// Based on Radix UI color system principles for perceptual uniformity
@function generate-scale($color, $curve: 'natural')
  $hue: color.hue($color)
  $base-saturation: color.saturation($color)
  $base-lightness: color.lightness($color)
  
  // Ensure step 9 is in a usable range (40-60% lightness)
  // This matches Radix UI's approach where step 9 is the "solid" color
  $target-lightness-9: if($base-lightness > 60%, 52%, if($base-lightness < 40%, 48%, $base-lightness))
  
  $scale: ()
  
  // Define perceptual lightness curve (non-linear for visual uniformity)
  // Based on Radix UI's scale structure
  $lightness-stops: (
    1: 99%,   // App background
    2: 98%,   // Subtle background  
    3: 96%,   // UI element background
    4: 93%,   // Hovered UI element
    5: 88%,   // Active UI element
    6: 78%,   // Subtle borders and separators
    7: 68%,   // UI element borders
    8: 58%,   // Hovered borders, focused borders
    9: $target-lightness-9,  // Solid backgrounds (buttons, etc)
    10: math.max($target-lightness-9 - 10%, 35%),  // Hovered solid backgrounds
    11: math.max($target-lightness-9 - 18%, 25%),  // Low contrast text
    12: math.max($target-lightness-9 - 28%, 15%)   // High contrast text
  )
  
  // Define saturation curve to maintain color identity
  // Higher values = more saturated (1.0 = original saturation)
  $saturation-multipliers: (
    1: 0.20,  // Very subtle hint of color
    2: 0.32,  // Slightly more color
    3: 0.48,  // Noticeable but soft
    4: 0.64,  // Clear color identity
    5: 0.80,  // Strong color presence
    6: 0.90,  // Near full saturation
    7: 0.95,  // Almost original
    8: 1.00,  // Full saturation
    9: 1.00,  // Original saturation (no change)
    10: 1.02, // Slightly boosted for hover
    11: 0.95, // Slightly muted for text
    12: 0.90  // Muted for high contrast text
  )
  
  // Apply curve adjustments
  @if $curve == 'vivid'
    // Vivid: More saturated throughout
    $saturation-multipliers: (
      1: 0.30, 2: 0.45, 3: 0.60, 4: 0.75, 5: 0.90,
      6: 1.00, 7: 1.05, 8: 1.10, 9: 1.10, 10: 1.12,
      11: 1.05, 12: 1.00
    )
  @else if $curve == 'muted'
    // Muted: Less saturated throughout
    $saturation-multipliers: (
      1: 0.15, 2: 0.25, 3: 0.35, 4: 0.50, 5: 0.65,
      6: 0.75, 7: 0.80, 8: 0.85, 9: 0.85, 10: 0.85,
      11: 0.80, 12: 0.75
    )
  
  @for $i from 1 through 12
    $target-lightness: map.get($lightness-stops, $i)
    $sat-multiplier: map.get($saturation-multipliers, $i)
    
    // Calculate final saturation (capped at 100%)
    $final-saturation: math.min($base-saturation * $sat-multiplier, 100%)
    
    // For step 9, keep as close to original as possible
    @if $i == 9
      // Only adjust lightness if needed, keep original saturation
      $scale: map.set($scale, $i, color.change($color, $lightness: $target-lightness))
    @else
      $scale: map.set($scale, $i, color.change($color, $lightness: $target-lightness, $saturation: $final-saturation))
  
  @return $scale

// Generate dark mode version of a scale
// Inspired by Radix UI's approach but generated algorithmically
@function generate-dark-scale($scale)
  $dark-scale: ()
  
  // Get the base color (step 9) for reference
  $base-color: map.get($scale, 9)
  $hue: color.hue($base-color)
  $base-saturation: color.saturation($base-color)
  $base-lightness: color.lightness($base-color)
  
  // Dark mode lightness curve - more spread out for better differentiation
  // Matching Radix's approach: very dark backgrounds, bright text
  $dark-lightness-stops: (
    1: 8%,    // Very dark app background
    2: 11%,   // Slightly lighter (more difference from step 1)
    3: 15%,   // More noticeable difference
    4: 19%,   // Hovered dark UI element
    5: 24%,   // Active dark UI element
    6: 30%,   // Dark subtle borders
    7: 38%,   // Dark UI borders
    8: 46%,   // Dark hovered borders
    9: $base-lightness,  // Keep original color (like Radix!)
    10: math.min($base-lightness + 8%, 65%),  // Slightly lighter for hover
    11: 85%,  // Very bright for low contrast text
    12: 96%   // Near white for high contrast text (matching Radix's #F1EEFE)
  )
  
  // Dark mode saturation adjustments - higher to avoid muddy colors
  // Add blue tint to backgrounds for more vibrancy
  $dark-saturation-multipliers: (
    1: 0.35,  // Still some color in darkest bg
    2: 0.45,  // More color to differentiate
    3: 0.55,  // Noticeable color
    4: 0.65,
    5: 0.75,
    6: 0.85,
    7: 0.95,
    8: 1.05,  // Boost for visibility
    9: 1.00,  // Keep original saturation
    10: 1.00, // Maintain saturation
    11: 1.10, // Boost for bright text
    12: 0.95  // Slightly muted but still colorful
  )
  
  @for $i from 1 through 12
    $target-lightness: map.get($dark-lightness-stops, $i)
    $sat-multiplier: map.get($dark-saturation-multipliers, $i)
    
    // Calculate final saturation
    $final-saturation: math.min($base-saturation * $sat-multiplier, 100%)
    
    // Create the dark mode color
    $dark-scale: map.set($dark-scale, $i, 
      hsl($hue, $final-saturation, $target-lightness)
    )
  
  @return $dark-scale

// Generate alpha scale for a color
@function generate-alpha-scale($color, $mode: 'light')
  $alpha-scale: ()
  
  // Get RGB values from the color
  $r: color.red($color)
  $g: color.green($color)
  $b: color.blue($color)
  
  // Alpha progression for semantic use - different for light and dark modes
  // Light mode: lower alphas for subtle backgrounds, higher for borders/overlays
  // Dark mode: generally needs higher alphas for visibility on dark backgrounds
  $light-alphas: (0.012, 0.027, 0.047, 0.071, 0.090, 0.114, 0.141, 0.220, 0.439, 0.478, 0.565, 0.910)
  $dark-alphas: (0.017, 0.034, 0.056, 0.085, 0.110, 0.135, 0.165, 0.250, 0.480, 0.520, 0.620, 0.930)
  
  @for $i from 1 through 12
    @if $mode == 'dark'
      // For dark mode, use the color with dark-optimized alphas
      // The color stays the same (indigo), just different opacity values
      $alpha: list.nth($dark-alphas, $i)
      $alpha-scale: map.set($alpha-scale, $i, rgba($r, $g, $b, $alpha))
    @else
      // For light mode, use the color with light-optimized alphas
      $alpha: list.nth($light-alphas, $i)
      $alpha-scale: map.set($alpha-scale, $i, rgba($r, $g, $b, $alpha))
  
  @return $alpha-scale

// Process a color input - can be a single color, a full scale, or a preset name
@function process-color-input($input, $presets: null)
  // If it's a string, check if it's a preset or a color
  @if meta.type-of($input) == 'string'
    @if $presets and map.has-key($presets, $input)
      @return map.get($presets, $input)
    @else
      // Assume it's a color value
      @return generate-scale($input)
  @else if meta.type-of($input) == 'map'
    // If it's a map, assume it's already a scale
    @return $input
  @else if meta.type-of($input) == 'color'
    // If it's a color, generate scale
    @return generate-scale($input)
  @else
    // Default: return as-is
    @return $input

// Generate all semantic tokens from a color scale
@function generate-semantic-tokens($name, $scale)
  $tokens: ()
  
  // Border tokens
  $tokens: map.set($tokens, '--lb-border-#{$name}-line', map.get($scale, 6))
  $tokens: map.set($tokens, '--lb-border-#{$name}-normal', map.get($scale, 7))
  $tokens: map.set($tokens, '--lb-border-#{$name}-active', map.get($scale, 8))
  $tokens: map.set($tokens, '--lb-border-#{$name}-focus', map.get($scale, 7))  // Using step 7 with alpha
  $tokens: map.set($tokens, '--lb-border-#{$name}-disabled', map.get($scale, 5))
  $tokens: map.set($tokens, '--lb-border-#{$name}-subtle', map.get($scale, 4))
  
  // Fill tokens
  $tokens: map.set($tokens, '--lb-fill-#{$name}-normal', map.get($scale, 9))
  $tokens: map.set($tokens, '--lb-fill-#{$name}-hover', map.get($scale, 10))
  $tokens: map.set($tokens, '--lb-fill-#{$name}-active', map.get($scale, 8))
  $tokens: map.set($tokens, '--lb-fill-#{$name}-focus', map.get($scale, 8))
  $tokens: map.set($tokens, '--lb-fill-#{$name}-disabled', map.get($scale, 4))
  
  // Text tokens
  $tokens: map.set($tokens, '--lb-text-#{$name}-normal', map.get($scale, 9))
  $tokens: map.set($tokens, '--lb-text-#{$name}-contrast-low', map.get($scale, 11))
  $tokens: map.set($tokens, '--lb-text-#{$name}-contrast-high', map.get($scale, 12))
  $tokens: map.set($tokens, '--lb-text-#{$name}-disabled', map.get($scale, 5))
  
  // Text-on tokens for filled backgrounds (calculated based on luminance)
  $fill-normal: map.get($scale, 9)
  $fill-hover: map.get($scale, 10)
  $fill-active: map.get($scale, 8)
  $tokens: map.set($tokens, '--lb-text-on-#{$name}', get-contrast-text($fill-normal))
  $tokens: map.set($tokens, '--lb-text-on-#{$name}-hover', get-contrast-text($fill-hover))
  $tokens: map.set($tokens, '--lb-text-on-#{$name}-active', get-contrast-text($fill-active))
  
  // Surface tokens
  $tokens: map.set($tokens, '--lb-surface-#{$name}-normal', map.get($scale, 2))
  $tokens: map.set($tokens, '--lb-surface-#{$name}-hover', map.get($scale, 3))
  $tokens: map.set($tokens, '--lb-surface-#{$name}-active', map.get($scale, 4))
  $tokens: map.set($tokens, '--lb-surface-#{$name}-subtle', map.get($scale, 1))
  $tokens: map.set($tokens, '--lb-surface-#{$name}-raised', map.get($scale, 1))
  $tokens: map.set($tokens, '--lb-surface-#{$name}-disabled', map.get($scale, 3))
  
  @return $tokens

// Helper mixin to output tokens as CSS custom properties
@mixin output-tokens($tokens)
  @each $property, $value in $tokens
    #{$property}: #{$value}